swagger: "2.0"
info:
  title: "Rest module task."
  description: "EPAM Java mentoring program 2021. Rest-api application, for demonstration of learnt material."
  version: "1.0.0"
host: "http://localhost:8080"
tags:
  - name: "events"
    description: "Interface to interact with events."
schemes:
  - http
paths:
  /events:
    post:
      tags:
        - "events"
      summary: "Add new event to database"
      description: ""
      operationId: "createEvent"
      consumes:
        - "application/json"
      produces:
        - "application/json"
        - "text/plain;charset=UTF-8"
      parameters:
        - in: "body"
          name: "body"
          description: "Event object that needs to be added to the database"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        "200":
          description: "Successful operation"
        "400":
          description: "Invalid input"
    get:
      tags:
        - "events"
      summary: "Get list of events"
      description: "If param passed - events will be filtered by title, containing param value. Else all events will be returned."
      operationId: "findAllEventsByTitle"
      parameters:
        - name: "title"
          in: "query"
          description: "Part of title to filter events"
          required: false
          type: "string"
      responses:
        "200":
          description: "Successful operation"
        "404":
          description: "No events fulfilling requirements were found"
  /events/{eventId}:
    get:
      tags:
        - "events"
      summary: "Get event by id"
      description: ""
      operationId: "getEventById"
      produces:
        - "application/json"
        - "text/plain;charset=UTF-8"
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid Id supplied"
        "404":
          description: "Event not found"
    put:
      tags:
        - "events"
      summary: "Update event by id"
      description: ""
      operationId: "updateEventById"
      produces:
        - "application/json"
        - "text/plain;charset=UTF-8"
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Event object that needs to be updated in the database"
          required: true
          schema:
            $ref: "#/definitions/Event"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid Id or event parameters supplied"
        "404":
          description: "Event not found"
    delete:
      tags:
        - "events"
      summary: "Delete event by id"
      description: ""
      operationId: "deleteEventById"
      produces:
        - "application/json"
        - "text/plain;charset=UTF-8"
      parameters:
        - name: "eventId"
          in: "path"
          description: "Id of event to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        "400":
          description: "Invalid Id supplied"
        "404":
          description: "Event not found"
definitions:
  Event:
    type: "object"
    required:
      - "title"
      - "place"
      - "eventType"
      - "dateTime"
    properties:
      id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
        description: "Event title"
        example: "How to wright calligraphy with any pen"
      place:
        type: "string"
        description: "Event hall"
        enum:
          - "MERCURY_HALL"
          - "VENUS_HALL"
          - "EARTH_HALL"
          - "MARS_HALL"
          - "JUPITER_HALL"
          - "SATURN_HALL"
          - "URANUS_HALL"
          - "NEPTUNE_HALL"
          - "PLUTO_HALL"
      speaker:
        type: "string"
        description: "Speaker name"
        example: "Yagami Light"
      eventType:
        type: "string"
        description: "Type of the event"
        enum:
          - "LECTION"
          - "EXHIBITION"
          - "PERFORMANCE"
          - "AUTOGRAPH_SESSION"
      dateTime:
        type: "string"
        format: "date-time"
    xml:
      name: "Event"

  
